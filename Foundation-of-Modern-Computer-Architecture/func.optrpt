Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: quad(int, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (quad(int, double *, double *, double *, double *, double *)) [1] func.c(6,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at func.c(8,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at func.c(10,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at func.c(10,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at func.c(10,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

func.c(6,1):remark #34051: REGISTER ALLOCATION : [quad] func.c:6

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     120
            Global    :      39
            Local     :      81
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.1%]
            Writes    :       4 [1.60e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: add_floats(double *, double *, double *, double *, double *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (add_floats(double *, double *, double *, double *, double *, int)) [2] func.c(26,78)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at func.c(29,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at func.c(31,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at func.c(31,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at func.c(31,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at func.c(31,5)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at func.c(29,3)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at func.c(31,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between a[i] (32:7) and b[i] (33:7)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at func.c(31,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

func.c(26,78):remark #34051: REGISTER ALLOCATION : [add_floats] func.c:26

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     192
            Global    :      52
            Local     :     140
        Regenerable   :       3
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      29 [2.93e+01 ~ 0.7%]
            Writes    :      10 [6.10e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
